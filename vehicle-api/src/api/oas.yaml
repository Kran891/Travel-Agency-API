openapi: 3.0.0
info:
  title: Travel Agency (Vehicle-API)
  version: 1.0.0
  description: >-
    This is project on Microservices where This API is useful for CRUD for
    vehicle 
  contact:
    email: kranthi8919@gmail.com
    name: Kranthi
servers:
  - url: http://localhost:4001/api/vehicles
tags:
  - name: Vehicle
    description: This section contains all the CRUD operations can be performed for Vehicle
  - name: VehicleBooking
    description: >-
      This section is useful for getting the booking for a vehicle for a
      particular Date
paths:
  /create:
    summary: This route is useful to create an Vehicle
    post:
      summary: Creating a new Vehicle
      security:
        - token: []
      description: ''
      x-eov-operation-handler: vehicle-controller
      operationId: createVehicleAsync
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Vehicle'
      responses:
        '201':
          description: When a New Vehicle has been created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Vehicle'
        '400':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: When token is invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      tags:
        - Vehicle
  /update/{id}/id:
    parameters:
      - $ref: '#/components/parameters/IdParam'
    summary: This route is used to update the vehicle details
    post:
      summary: This is used to update details of the exsiting vehicle
      description: ''
      security:
        - token: []
      x-eov-operation-handler: vehicle-controller
      operationId: updateVehicleAsync
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Vehicle'
      responses:
        '200':
          description: When Vehicle data Updated Successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Vehicle'
        '400':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: When token is invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: When any Service Error Occurs
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      tags:
        - Vehicle
  /{id}/id:
    summary: This route is used to get the vehicle details with the Id
    parameters:
      - $ref: '#/components/parameters/IdParam'
    get:
      summary: This is used to get the details of the vehicle by the Vehicle Id
      description: ''
      x-eov-operation-handler: vehicle-controller
      operationId: getVehicleByIdAsync
      responses:
        '200':
          description: When Vehicle data Updated Successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Vehicle'
        '409':
          description: When any Service Error Occurs
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      tags:
        - Vehicle
  /{id}/id/addRoute:
    parameters:
      - $ref: '#/components/parameters/IdParam'
    summary: This route is used to add new route to the vehicle with the id
    post:
      summary: 'This is used to add the route to the exsiting vehicle '
      description: ''
      security:
        - token: []
      x-eov-operation-handler: vehicle-controller
      operationId: addrouteAsync
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Route'
      responses:
        '200':
          description: When Vehicle found Successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Vehicle'
        '400':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: When token is invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: When any Service Error Occurs
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        default:
          description: Default error sample response
      tags:
        - Vehicle
  /{id}/id/removeRoute:
    parameters:
      - $ref: '#/components/parameters/IdParam'
    summary: >-
      This route is used to delete the route for the vehicle based on source and
      destination
    post:
      summary: >-
        This is used to remove the routes of the vehicle by Id based on source
        and destination
      description: ''
      security:
        - token: []
      x-eov-operation-handler: vehicle-controller
      operationId: removeRouteAsync
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Route'
      responses:
        '200':
          description: When Vehicle data Updated Successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '400':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: When token is invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: When any Service Error Occurs
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        default:
          description: Default error sample response
      tags:
        - Vehicle
  /routes:
    summary: This route is used to Get all the values available for the given route
    post:
      summary: This is used to get the vehicles based on source and destination
      description: ''
      x-eov-operation-handler: vehicle-controller
      operationId: getVehiclesByRouteAsync
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Route'
      responses:
        '200':
          description: When Vehicles data Found Successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Vehicle'
        '400':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: When any Service Error Occurs
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        default:
          description: Default error sample response
      tags:
        - Vehicle
  /{vehicleId}/vehicleId/booking:
    parameters:
      - $ref: '#/components/parameters/vehicleIdParam'
      
    summary: This is used to create or update a booking on the date
    post:
      summary: ''
      description: ''
      # security:
      #  - token: []
      x-eov-operation-handler: vehicle-booking-controller
      operationId: updateBookingAsync
      requestBody:
        required: true
        content:
          application/json:
            schema:
             $ref: '#/components/schemas/BookingSchema'
      responses:
        '200':
          description: When an Booking Updated or Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BookingSchema'
        '401':
          description: When an token is invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        default:
          description: Default error sample response
      tags:
        - VehicleBooking
components:
  parameters:
    IdParam:
      name: id
      in: path
      required: true
      schema:
        type: string
        example: 5f83827c6b3df58f10ab7d47
    vehicleIdParam:
      name: vehicleId
      in: path
      required: true
      schema:
        type: string
        example: 5f83827c6b3df58f10ab7d47 
  schemas:
    Route:
      type: object
      required:
        - source
        - destination
      additionalProperties: false
      properties:
        source:
          type: string
          pattern: ^[A-Z][a-zA-Z]*$
          example: Banglore
        destination:
          type: string
          pattern: ^[A-Z][a-zA-Z]*$
          example: Vijayawada
    Vehicle:
      type: object
      required:
        - registrationNumber
        - capacity
        - priceperkm
        - vehicleStatus
        - driverId
        - vehicleType
        - routes
      properties:
        registrationNumber:
          type: string
          example: APO2 BV 8716
        capacity:
          type: number
          minimum: 1
          maximum: 50
        priceperkm:
          type: number
          minimum: 3
          maximum: 20
        vehicleStatus:
          type: string
          enum:
            - ON_DUTY
            - OFF_DUTY
        driverId:
          type: string
          example: 5f83827c6b3df58f10ab7d47
        vehicleType:
          type: string
          enum:
            - SUV
            - MINI
            - MACRO
            - CUV
            - MINIVAN
        routes:
          type: array
          minItems: 1
          items:
            $ref: '#/components/schemas/Route'
          uniqueItems: true
        id:
          type: string
    ErrorResponse:
      type: array
      items:
        $ref: '#/components/schemas/ErrorSchema'
    ErrorSchema:
      type: object
      properties:
        msg:
          type: string
          example: This is an Error message
    BookingSchema:
      type: object
      required:
       - date
       - capacity
      additionalProperties: false
        
      properties:
        date:
          type: string
          format: date
        capacity:
          type: number
          minimum: 1
          maximum: 4
          example: 1
        id:
          type: string
        vehicleId: 
          type: string
  securitySchemes:
    token:
      name: jwt
      type: apiKey
      in: query
